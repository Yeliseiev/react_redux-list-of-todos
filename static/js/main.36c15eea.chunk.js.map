{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","queryCondition","title","toLowerCase","includes","completed","length","className","map","id","isSelectedTodo","classNames","onClick","currentTodoAction","TodoFilter","onSubmit","event","preventDefault","value","onChange","e","filterActions","target","placeholder","style","pointerEvents","BASE_URL","wait","delay","Promise","resolve","setTimeout","get","url","a","fullURL","fetch","res","json","Loader","TodoModal","useState","currentUser","setCurrentUser","error","setError","isLoading","setIsLoading","useEffect","getUserFromServer","userId","userFromServer","currentTodoActions","href","email","name","App","fetchTodos","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36c15eea.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'query/SET_QUERY'; payload: string };\ntype SetStatusAction = { type: 'status/SET_STATUS'; payload: Status };\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'status/SET_STATUS',\n  payload: status,\n});\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nexport const actions = { setQuery, setStatus };\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'query/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'status/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/SET'; payload: Todo[] };\ntype Action = SetAction;\n\nconst setTodos = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const visibleTodos = useAppSelector(({ todos, filter }) => {\n    return todos.filter(todo => {\n      const queryCondition = todo.title\n        .toLowerCase()\n        .includes(filter.query.toLowerCase());\n\n      switch (filter.status) {\n        case 'all':\n          return queryCondition;\n        case 'active':\n          return queryCondition && !todo.completed;\n        case 'completed':\n          return queryCondition && todo.completed;\n        default:\n          return true;\n      }\n    });\n  });\n\n  return (\n    <>\n      {!visibleTodos.length\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => {\n                const { id, completed, title } = todo;\n                const isSelectedTodo = currentTodo?.id === id;\n\n                return (\n                  <tr\n                    data-cy=\"todo\"\n                    key={id}\n                    className={classNames(\n                      { 'has-background-info-light': isSelectedTodo },\n                    )}\n                  >\n                    <td className=\"is-vcentered\">{id}</td>\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames(\n                        completed\n                          ? 'has-text-success'\n                          : 'has-text-danger',\n                      )}\n                      >\n                        {title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => {\n                          dispatch(currentTodoAction.setTodo(todo));\n                        }}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames(\n                            'far',\n                            isSelectedTodo ? 'fa-eye-slash' : 'fa-eye',\n                          )}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleStatusChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(e.target.value as Status));\n  };\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(e.target.value));\n  };\n\n  const handleResetQuery = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear-button\"\n              onClick={handleResetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nasync function get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL + url}.json`;\n\n  await wait(300);\n  const res = await fetch(fullURL);\n\n  return res.json();\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      try {\n        if (currentTodo) {\n          setError(false);\n          setIsLoading(true);\n          const userFromServer = await getUser(currentTodo.userId);\n\n          setCurrentUser(userFromServer);\n        }\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                aria-label=\"close-button\"\n                onClick={removeTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              {error\n                ? (\n                  <strong className=\"has-text-danger\">\n                    Can&apos;t load user\n                  </strong>\n                )\n                : (\n                  <>\n                    <p className=\"block\" data-cy=\"modal-title\">\n                      {currentTodo?.title}\n                    </p>\n\n                    <p className=\"block\" data-cy=\"modal-user\">\n                      {currentTodo?.completed\n                        ? <strong className=\"has-text-success\">Done</strong>\n                        : <strong className=\"has-text-danger\">Planned</strong>}\n                      {' by '}\n                      <a href={`mailto:${currentUser?.email}`}>{currentUser?.name}</a>\n                    </p>\n                  </>\n                )}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        setError(false);\n        setIsLoading(true);\n        const todosFromServer = await getTodos();\n\n        dispatch(todosActions.setTodos(todosFromServer));\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {error && (\n                <p className=\"notification is-warning\">\n                  Can&apos;t load todos\n                </p>\n              )}\n\n              {!isLoading && !error && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}